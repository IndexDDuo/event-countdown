{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from \"expo-status-bar\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport React, { useState, useCallback, useEffect, useMemo } from \"react\";\nimport Home from \"./screens/Home.js\";\nimport Detail from \"./screens/Detail.js\";\nimport Edit from \"./screens/Edit.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nvar handleSave = function handleSave(modalVisible, setModalVisible, navigation, eventData) {\n  setModalVisible(true);\n  console.log(\"save button is pressed. app.js  \" + modalVisible);\n  navigation.navigate(\"Edit\", {\n    modalVisible: true\n  });\n};\nexport default function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    modalVisible = _useState2[0],\n    setModalVisible = _useState2[1];\n  useEffect(function () {\n    console.log(\"App.js \" + modalVisible);\n  }, [modalVisible]);\n  return _jsx(NavigationContainer, {\n    children: _jsxs(Stack.Navigator, {\n      initialRouteName: \"Home\",\n      children: [_jsx(Stack.Screen, {\n        name: \"Home\",\n        component: Home,\n        options: function options(_ref) {\n          var navigation = _ref.navigation;\n          return {\n            headerRight: function headerRight() {\n              return _jsx(Button, {\n                title: \"Add\",\n                onPress: function onPress() {\n                  navigation.navigate(\"Edit\");\n                }\n              });\n            }\n          };\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Detail\",\n        component: Detail\n      }), _jsx(Stack.Screen, {\n        name: \"Edit\",\n        component: Edit,\n        options: function options(_ref2) {\n          var navigation = _ref2.navigation;\n          return {\n            headerRight: function headerRight() {\n              return _jsx(Button, {\n                title: \"Save\",\n                onPress: function onPress() {\n                  handleSave(modalVisible, setModalVisible, navigation, eventData);\n                }\n              });\n            }\n          };\n        },\n        initialParams: {\n          setModalVisible: setModalVisible,\n          modalVisible: modalVisible\n        }\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});","map":{"version":3,"names":["StatusBar","Button","StyleSheet","Text","View","NavigationContainer","createNativeStackNavigator","React","useState","useCallback","useEffect","useMemo","Home","Detail","Edit","jsx","_jsx","jsxs","_jsxs","Stack","handleSave","modalVisible","setModalVisible","navigation","eventData","console","log","navigate","App","_useState","_useState2","_slicedToArray","children","Navigator","initialRouteName","Screen","name","component","options","_ref","headerRight","title","onPress","_ref2","initialParams","styles","create","container","flex","backgroundColor","alignItems","justifyContent"],"sources":["C:/Users/29353/OneDrive/Documents/dig4639c/event-countdown-app/App.js"],"sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport { Button, StyleSheet, Text, View } from \"react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport React, { useState, useCallback, useEffect, useMemo } from \"react\";\nimport Home from \"./screens/Home.js\";\nimport Detail from \"./screens/Detail.js\";\nimport Edit from \"./screens/Edit.js\";\n\nconst Stack = createNativeStackNavigator();\n\n// handling modal\nconst handleSave = (modalVisible, setModalVisible, navigation, eventData) => {\n  setModalVisible(true);\n  console.log(`save button is pressed. app.js  ${modalVisible}`);\n  navigation.navigate(\"Edit\", { modalVisible: true });\n};\n\nexport default function App() {\n  const [modalVisible, setModalVisible] = useState(false);\n\n  useEffect(() => {\n    console.log(`App.js ${modalVisible}`);\n  }, [modalVisible]);\n\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Home\">\n        <Stack.Screen\n          name=\"Home\"\n          component={Home}\n          options={({ navigation }) => ({\n            headerRight: () => (\n              <Button\n                title=\"Add\"\n                onPress={() => {\n                  navigation.navigate(\"Edit\");\n                }}\n              ></Button>\n            ),\n          })}\n        />\n        <Stack.Screen name=\"Detail\" component={Detail} />\n        <Stack.Screen\n          name=\"Edit\"\n          component={Edit}\n          options={({ navigation }) => ({\n            headerRight: () => (\n              <Button\n                title=\"Save\"\n                onPress={() => {\n                  handleSave(\n                    modalVisible,\n                    setModalVisible,\n                    navigation,\n                    eventData\n                  );\n                }}\n              ></Button>\n            ),\n          })}\n          initialParams={{\n            setModalVisible: setModalVisible,\n            modalVisible: modalVisible,\n          }}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}